using GoldfarbIdnaniSolver, Test
using LinearAlgebra, SparseArrays, StatsBase

#the following function comes from Jherek Healy AQFED.jl package and has been modified to use GoldfarbIdnaniSolver
function filterConvexCallPrices(
    strikes::Vector{T},
    callPrices::Vector{T}, #undiscounted!
    weights::Vector{T},
    forward::T;
    tol = 1e-8
)::Tuple{Vector{T},Vector{T},Vector{T}} where {T}
    n = length(callPrices)
    G = spzeros(T, 2 * n, n)
    h = zeros(T, 2 * n)
    for i = 2:n-1
        dym = (strikes[i] - strikes[i-1])
        dy = (strikes[i+1] - strikes[i])
        G[i, i-1] = -1 / dym
        G[i, i] = 1 / dym + 1 / dy
        G[i, i+1] = -1 / dy
    end
    G[1, 1] = 1 / (strikes[2] - strikes[1])
    G[1, 2] = -G[1, 1]
    G[n, n] = 1 / (strikes[n] - strikes[n-1])
    G[n, n-1] = -G[n, n]
    for i = 1:n
        h[i] = -tol
        G[n+i, i] = -1
        h[n+i] = -max(forward - strikes[i], 0) - tol
    end
    h[1] = 1 - tol
    W = spdiagm(weights)
    strikesf = strikes
    #z = Variable(n)
    #problem = minimize(square(norm(W * (z - callPrices))), G * z <= h)
    ##solve!(problem, () -> SCS.Optimizer(verbose = 0))
    ##Convex.solve!(problem, () -> COSMO.Optimizer(verbose = false, eps_rel = 1e-8, eps_abs = 1e-8))
    ##println("problem status is ", problem.status, " optimal value is ", problem.optval)
    #pricesf = Convex.evaluate(z)
    amat, aind = convertSparse(copy(-G'))
    factorized = true
    dmat = diagm(1.0 ./ weights)
    dvec = @. callPrices * weights^2
    nEqualities = (strikes[1] == 0) ? 1 : 0
    pricesf, lagr, crval, iact, nact, iter = solveQPcompact(dmat, dvec, amat, aind, -h, meq=nEqualities, factorized = true)
    return strikesf, pricesf, weights
end

@testset "ConvexCallsTSLA" begin
    strikes = Float64.([20, 25, 50, 55, 75, 100, 120, 125, 140, 150, 160, 175, 180, 195, 200, 210, 230, 240, 250, 255, 260, 270, 275, 280, 285, 290, 300, 310, 315, 320, 325, 330, 335, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 550, 580, 590, 600, 650, 670, 680, 690, 700])
    prices = [337.9478782712897, 333.2264008151271, 310.49584376491333, 306.5789869909477, 288.3326474521462, 266.1436620149496, 249.44466994191146, 244.47045906634085, 232.02358238485036, 223.57092985061374, 215.47932505838847, 203.49665261662705, 199.45085022051444, 187.64870164975878, 183.73184487579312, 176.72338330960227, 161.59752782675685, 154.84695750485992, 147.27113520122242, 144.51478902657934, 141.11371474120148, 134.64682478802777, 131.65837649352014, 128.3346695814304, 125.60411253121669, 122.28040561912707, 115.9424612881003, 110.99712967626056, 108.21499437718802, 105.35549170482741, 102.75388027676055, 100.15226884869381, 97.60223566948576, 95.07799161470709, 90.23581650058495, 85.61989310557237, 80.97785070828226, 76.85159079958001, 72.72533089087777, 67.85118637372317, 64.96280443763155, 61.352327017517055, 58.025529966125816, 54.95662415902851, 51.810350978643, 49.07670378912775, 46.34305659961247, 43.11941604593882, 41.05628609158771, 38.735264892942695, 36.285298072150695, 34.8668962285343, 28.935397609774668, 24.370722585772782, 23.003898991015205, 21.27602765424615, 16.324515763803383, 14.545066178175517, 13.719814196435081, 13.049296961270962, 12.22404497953049]
    weights = [0.18348804852853492, 0.14552754066163864, 0.06087460548064749, 0.05109612140267557, 0.03629649739986478, 0.025613847407177506, 0.020011216481149133, 0.019345036201403803, 0.01663883576809264, 0.015257762783202483, 0.014011545380885547, 0.012468184742920784, 0.012034729348791627, 0.010873040937928326, 0.010535157435308888, 0.009879102038500473, 0.008855540796164947, 0.00841084879707799, 0.008032374522333945, 0.007845822148042107, 0.00767850819280654, 0.00737017036267451, 0.007228761921893696, 0.007096391696183667, 0.00697143229125802, 0.006853569353455795, 0.006637272585167783, 0.0064509208672822085, 0.006365169495070308, 0.006284168069410054, 0.006209646991746033, 0.0061399098141406445, 0.0060750536990634395, 0.006014709985843373, 0.0059077251648834515, 0.0058176064495057645, 0.005741621638057057, 0.005682166059320373, 0.005635273659488148, 0.005598197720478721, 0.00557969512744412, 0.005570043788415912, 0.005571719928608071, 0.005583741283162423, 0.005606897345237971, 0.0056386186100743, 0.005680979257062336, 0.005742146253326264, 0.005798784362859748, 0.005870563857815834, 0.005958641403270033, 0.006029457615736634, 0.0063683433148160615, 0.0067726154457943945, 0.006927129393879053, 0.007136508419763993, 0.008060162361264996, 0.00852974277055327, 0.008785608144514201, 0.009023417426706495, 0.009332153986076881]
    forward = 356.73063159822254
    tte = 1.5917808219178082
    strikesf, pricesf = filterConvexCallPrices(strikes, prices, weights, forward, tol = 1e-6)
    rmse = rmsd(pricesf .* weights, prices .* weights)
    println(rmse, " ", rmse^2)
    @test isapprox(0.003113, rmse, atol = 1e-6)
end

@testset "Qpgen1" begin
    dmat = [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0]
    dvec = [0.0, 5.0, 0.0]
    Amat = [-4.0 2.0 -2.0; -3.0 1.0 1.0]
    Aind = [2 2 2; 1 1 2; 2 2 3]
    bvec = [-8.0, 2.0, 0.0]
    sol, lagr, crval, iact, nact, iter = solveQPcompact(dmat, dvec, Amat, Aind, bvec, factorized = false)
    println(sol, " ", lagr, " ", crval, " ", iact, " ", nact, " ", iter)
    solRef = [0.4761905, 1.0476190, 2.0952381]
    for (a, b) in zip(solRef, sol)
        @test isapprox(a, b, atol = 1e-6)
    end
    @test isapprox(-2.380952, crval, atol = 1e-6)
end

@testset "ConvexCalls" begin
    #wasteful way of enforcing convexity, good test with very large dimension 
    ul = Float64.([1400, 1500, 1600, 1650, 1700, 1750, 1800, 1850, 1900, 1950, 2000, 2025, 2050, 2075, 2100, 2125, 2150, 2175, 2200, 2210, 2220, 2225, 2230, 2240, 2250, 2260, 2270, 2275, 2280, 2290, 2300, 2310, 2320, 2325, 2330, 2340, 2350, 2360, 2370, 2375, 2380, 2385, 2390, 2395, 2400, 2405, 2410, 2415, 2420, 2425, 2430, 2435, 2440, 2445, 2450, 2455, 2460, 2465, 2470, 2475, 2480, 2485, 2490, 2495, 2500, 2505, 2510, 2515, 2520, 2525, 2530, 2535, 2540, 2545, 2550, 2555, 2560, 2565, 2570, 2575, 2580, 2585, 2590, 2595, 2600, 2605, 2610, 2615, 2620, 2625, 2630, 2635, 2640, 2645, 2650, 2655, 2660, 2665, 2670, 2675, 2680, 2685, 2690, 2695, 2700, 2705, 2710, 2715, 2720, 2725, 2730, 2735, 2740, 2745, 2750, 2755, 2760, 2765, 2770, 2775, 2780, 2785, 2790, 2795, 2800, 2805, 2810, 2815, 2820, 2825, 2830, 2835, 2840, 2845, 2850, 2855, 2860, 2865, 2870, 2875, 2880, 2885, 2890, 2895, 2900, 2905, 2910, 2915, 2920, 2925, 2930, 2935, 2940, 2945, 2950, 2955, 2960, 2965, 2970, 2975, 2980, 2985, 2990, 2995, 3000, 3005, 3010, 3015, 3020, 3025, 3050, 3075, 3100, 3150])
    yl = [1439.0248640111151, 1339.0248640111147, 1239.0498846154915, 1189.0498846154915, 1139.0498846154915, 1089.0498846154917, 1039.074905219868, 989.0999258242443, 939.0999258242443, 889.1249464286211, 839.1499670329974, 814.1499670329979, 789.1749876373742, 764.1749876373742, 739.2000082417508, 714.2250288461278, 689.2500494505039, 664.2750700548804, 639.300090659257, 629.300090659257, 619.325111263634, 614.3501318680105, 609.3501318680105, 599.3501318680101, 589.3751524723866, 579.4001730767632, 569.4001730767632, 564.4001730767636, 559.4251936811402, 549.4502142855163, 539.4502142855163, 529.5002554942694, 519.5002554942694, 514.5002554942698, 509.5252760986464, 499.55029670302247, 489.600337911776, 479.600337911776, 469.6503791205291, 464.6503791205291, 459.65037912052867, 454.6753997249052, 449.7004203292822, 444.70042032928177, 439.7254409336583, 434.75046153803487, 429.75046153803487, 424.7754821424114, 419.7754821424119, 414.8255233511645, 409.85054395554107, 404.85054395554107, 399.8755645599176, 394.90058516429417, 389.9506263730477, 384.9506263730477, 380.0006675818008, 375.00066758180037, 370.0507087905535, 365.07572939493, 360.1007499993066, 355.1257706036836, 350.1507912080597, 345.2008324168128, 340.2258530211898, 335.2758942299424, 330.3009148343194, 325.3509560430721, 320.3759766474486, 315.4260178562022, 310.4760590649548, 305.50107966933183, 300.5511208780845, 295.6011620868376, 290.65120329559113, 285.7262651087208, 280.7763063174739, 275.82634752622744, 270.8763887349801, 265.9264299437332, 261.0265123612394, 256.0765535699925, 251.15161538312213, 246.22667719625179, 241.326759613758, 236.40182142688764, 231.4768832400173, 226.5769656575235, 221.6770480750297, 216.80215109691244, 211.90223351441864, 207.0023159319253, 202.10239834943104, 197.25252197569034, 192.40264560194964, 187.55276922820894, 182.7028928544687, 177.853016480728, 173.0531813157404, 168.2033049419997, 163.4034697770121, 158.6036346120245, 153.85384065579, 149.0540054908024, 144.35425274332147, 139.60445878708651, 134.85466483085247, 130.15491208337107, 125.50520054464278, 120.85548900591493, 116.20577746718664, 111.60610713721144, 107.05647801598934, 102.55689010352035, 98.0573021910518, 93.55771427858281, 89.15820878361956, 84.75870328865676, 80.45928021120062, 76.15985713374448, 71.96051647379363, 67.81121702259657, 63.7619999889057, 59.81286537272126, 55.86373075653637, 52.11476097536456, 48.4158324029454, 44.816986248032435, 41.368263719379, 38.06966481698464, 34.87114833209648, 31.77271426471475, 28.87377745054482, 26.12151096912362, 23.519368113961946, 21.117390093812674, 18.915576908675803, 16.813846141045246, 14.912280208426978, 13.210879110821338, 11.609560430721558, 10.20840658563452, 8.907335158053684, 7.756387356731921, 6.755563181669913, 5.954903841620023, 5.154244501570531, 4.553749996533156, 3.953255491495838, 3.452843403964664, 3.0775343383164113, 2.702225272667988, 2.4019780201493006, 2.1517719763837704, 1.9015659326182117, 1.7264217019822752, 1.551277471346424, 1.4011538450871228, 1.2760508232042724, 1.175968405698157, 1.075885988191871, 1.000824175062192, 0.9257623619325699, 0.8507005488028767, 0.7756387356731977, 0.7255975269200974, 0.6755563181669899, 0.6255151094138682, 0.5754739006608176, 0.5754739006607821, 0.42535027440145257, 0.30024725251868034, 0.20016483501244764, 0.10008241750621849]
    m = length(ul)
    dmat = zeros(Float64, (2 * m, 2 * m))
    for i = 1:m
        dmat[i, i] = 1.0
        dmat[m+i, m+i] = 1e-7
    end
    dvec = zeros(Float64, 2 * m)
    dvec[1:m] = yl

    gCsr = spzeros(Float64, Int, (2 + m * m - m, 2 * m))
    for i = 1:m
        for j = 1:i-1
            gCsr[(i-1)*(m-1)+j, i] = -1.0
            gCsr[(i-1)*(m-1)+j, j] = 1.0
            gCsr[(i-1)*(m-1)+j, m+i] = -(ul[j] - ul[i])
        end
        for j = (i+1):m
            gCsr[(i-1)*(m-1)+j-1, i] = -1.0
            gCsr[(i-1)*(m-1)+j-1, j] = 1.0
            gCsr[(i-1)*(m-1)+j-1, m+i] = -(ul[j] - ul[i])
        end
    end
    gCsr[m*m-m+1, m+1] = 1.0
    gCsr[m*m-m+2, m+m] = -1.0
    bvec = zeros(Float64, 2 + m * m - m)
    bvec[m*m-m+1] = -1 + 1e-5
    bvec[m*m-m+2] = 1e-5
    amat, aind = convertSparse(copy(gCsr'))
    println(size(aind))
    for i = 1:m
        dmat[m+i, m+i] = 1.0 / sqrt(dmat[m+i, m+i])
    end
    total = @elapsed sol, lagr, crval, iact, nact, iter = solveQPcompact(dmat, dvec, amat, aind, bvec, factorized = true)
    println(sol, " ", crval, " ", iter, " in ", total)
    println(size(sol), " ", size(yl))
    rmse = rmsd(sol[1:m], yl)
    println("RMSE ", rmse, " ", rmse^2)
    @test isapprox(4.5e-5, rmse^2, atol = 1e-6)
end

@testset "Gwen" begin
    Dmat = [4.000 -1.224000 0.000 0.000000 0.000 0.000000 0 0e+00 0e+00
        -1.224 0.417898 0.000 0.000000 0.000 0.000000 0 0e+00 0e+00
        0.000 0.000000 49.000 -0.156000 0.000 0.000000 0 0e+00 0e+00
        0.000 0.000000 -0.156 0.109192 0.000 0.000000 0 0e+00 0e+00
        0.000 0.000000 0.000 0.000000 2.000 0.518000 0 0e+00 0e+00
        0.000 0.000000 0.000 0.000000 0.518 0.137524 0 0e+00 0e+00
        0.000 0.000000 0.000 0.000000 0.000 0.000000 1 0e+00 0e+00
        0.000 0.000000 0.000 0.000000 0.000 0.000000 0 1e-08 0e+00
        0.000 0.000000 0.000 0.000000 0.000 0.000000 0 0e+00 1e-08]
    dvec = [0.53741123, 0.40486447, 25.93321349, -0.05075975, 0.90951388, 0.25524170, 0.48459807, 0.00000000, 0.00000000]
    Amat = Float64.([1.000 0.0000 0.000 0 0 0 0 0 0 0 0 0
        -0.163 0.0000 0.000 1 0 0 -1 1 0 1 0 0
        -1.000 1.0000 0.000 0 0 0 0 0 0 0 0 0
        0.163 0.2045 0.000 0 1 0 -1 -1 1 -1 1 0
        0.000 -1.0000 1.000 0 0 0 0 0 0 0 0 0
        0.000 -0.2045 0.511 0 0 1 -1 0 -1 0 -1 0
        0.000 0.0000 -1.000 0 0 0 0 0 0 0 0 0
        0.000 0.0000 0.000 0 0 0 0 1 0 -1 0 -1
        0.000 0.0000 0.000 0 0 0 0 0 1 0 -1 -1])
    bvec = [0e+00, 0e+00, 0e+00, 0e+00, 0e+00, 0e+00, -1e+01, 0e+00, 0e+00, 0e+00, 0e+00, -1e-04]
    amat, aind = convertSparse(sparse(Amat))
    sol, lagr, crval, iact, nact, iter = solveQPcompact(Dmat, dvec, amat, aind, bvec, meq=3)
    println(sol, " ", crval, " ", iter)
    @test iter[1] == 7
    @test isapprox(22.204332981569845, crval, atol = 1e-6)

end

@testset "test1" begin
    Dmat = [1.0 0.0 0.0
        0.0 1.0 0.0
        0.0 0.0 1.0]
    dvec = [0.0, 5.0, 0.0]
    Aind = [2 2 2
        1 1 2
        2 2 3]
    Amat = Float64.([-4 2 -2
        -3 1 1])
    bvec = [-8.0, 2.0, 0.0]

    sol, lagr, crval, iact, nact, iter = solveQPcompact(Dmat, dvec, Amat, Aind, bvec)
    println(sol, " ", crval, " ", iter)
    @test iter[1] == 3

    Dmat = Float64.([4 -2
        -2 4])
    Amat = Float64.([1 1 1
        1 1 1])
    Aind = [1 1 2
        1 2 1
        0 0 2]
    bvec = [0.0, 0.0, 2.0]
    dvec = [-6.0, 0.0]
    sol, lagr, crval, iact, nact, iter = solveQPcompact(Dmat, dvec, Amat, Aind, bvec)
    println(sol, " ", crval, " ", iter)
    @test iter[1] == 2

end